org: prtcl
app: medinex
service: medinex-backend

provider:
  name: aws
  runtime: nodejs22.x
  region: ap-south-1
  stage: dev
  environment:
    MONGODB_URL: ${env:MONGODB_URL, 'mongodb://localhost:27017/medenix'}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - "execute-api:ManageConnections"
      Resource:
        - "arn:aws:execute-api:${self:provider.region}:*:*/*/POST/@connections/*"
        - "arn:aws:execute-api:${self:provider.region}:*:*/*/GET/@connections/*"
        - "arn:aws:execute-api:${self:provider.region}:*:*/*/DELETE/@connections/*"
    - Effect: Allow
      Action:
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:DeleteItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:Scan"
      Resource: "*"

functions:
  # HTTP API handlers
  getOtp:
    handler: lambdas/index.sendOTP
  verifyOtp:
    handler: lambdas/index.verifyOTP
  registerPatient:
    handler: lambdas/index.addPatient
  registerDoctor:
    handler: lambdas/index.addDoctor
  loginPatient:
    handler: lambdas/index.patientLogin
  loginDoctor:
    handler: lambdas/index.doctorLogin
  setDoctorPassword:
    handler: lambdas/index.createDoctorPassword
  getDoctorDetailsByLoginId:
    handler: lambdas/index.getDoctorDetails
  getPatientDetialsByNumber:
    handler: lambdas/index.getPatientDetails
  addAppointment:
    handler: lambdas/index.addAppointment
  getAppointmentsByPatientId:
    handler: lambdas/index.getAppointmentPatient
  getAppointmentsByDoctorId:
    handler: lambdas/index.getAppointmentDoctor
  cancelAppointment:
    handler: lambdas/index.deleteAppointment
  getVerifiedDoctors:
    handler: lambdas/index.getVerifiedDoctors
  getAvailableSlots:
    handler: lambdas/index.getAppointmentsByDoctorIdAndDate
  getDoctorPatients:
    handler: lambdas/index.getDoctorPatients
  logSymptoms:
    handler: lambdas/index.logSymptoms
  updateDoctorDetails:
    handler: lambdas/updateDoctorDetails.handler
  updatePatientDetails:
    handler: lambdas/updatePatientDetails.handler
  getHealthLogs:
    handler: lambdas/getHealthLogs.handler

  # WebSocket handlers
  websocketConnect:
    handler: lambdas/websocket/connect.handler
    events:
      - websocket:
          route: $connect

  websocketDisconnect:
    handler: lambdas/websocket/disconnect.handler
    events:
      - websocket:
          route: $disconnect

  websocketSendMessage:
    handler: lambdas/websocket/sendMessage.handler
    events:
      - websocket:
          route: $default
